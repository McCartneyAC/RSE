#####################################################
#                                                   #
#             Library of R functions                #
#                                                   #
#####################################################

omega_sq <- function(aovm){
  sum_stats <- summary(aovm)[[1]]
  SSm <- sum_stats[["Sum Sq"]][1]
  SSr <- sum_stats[["Sum Sq"]][2]
  DFm <- sum_stats[["Df"]][1]
  MSr <- sum_stats[["Mean Sq"]][2]
  W2 <- (SSm-DFm*MSr)/(SSm+SSr+MSr)
  return(W2)
}
omega_sq(fit)


#######################################


eta_sq<-function(aovm){
  sum_stats <- summary(aovm)[[1]]
  SSm <- sum_stats[["Sum Sq"]][1]
  SSr <- sum_stats[["Sum Sq"]][2]
  e2 <- (SSm)/(SSm+SSr)
  return(e2)
}
eta_sq(fit)

################d effect size for anovas############
#d  and f effect size calculator for oneway anovas

# Here's how it works: the formula d.f.effect.size()
# requires three arguments: 
# 1) the anova model that we would previously have made
# 2) the continuous variable
# 3) the grouping variable

d.f.effect.size <- function(aovm, continuous, group){
  sum_stats <- summary(aovm)[[1]]
  DFm <- sum_stats[["Df"]][1]
  MSerror <- sum_stats[["Mean Sq"]][2]
  grandmean<-mean(continuous)
  groupmeans<-aggregate(continuous, list(group), mean)[,2]
  g1m<-groupmeans[1]
  g2m<-groupmeans[2]
  g3m<-groupmeans[3]
  difmeans <-  ((g1m-grandmean)^2+
             (g2m-grandmean)^2+
             (g3m-grandmean)^2)
  d<-sqrt(1/(DFm)*(difmeans/MSerror)) 
  f<-sqrt(1/(DFm+1)*(difmeans/MSerror))
  mat<-cbind(d,f)
  colnames(mat) <- c("d effect size","f effect size")
return(mat)
}
setwd("C:\\Users\\Andrew\\Desktop\\Statistics and Data Analysis\\R and R Related\\Stat 2")
ub<-read.csv("Ex11-32-long-ub.csv", header=T)



fit2<-aov(ub$reaction~ub$ï..condition)
summary(fit2)
d.f.effect.size(fit2,continuous=ub$reaction, group = ub$ï..condition)



####################post hoc comparisons activity #########################################

##### Week 5

### Sec 12.6

setwd("C:\\Users\\Andrew\\Downloads")
getwd()

morphine <- read.csv("Tab12-1.csv", header=T)
head(morphine)
morphine$Group <- as.factor(morphine$Group)

# Fisher's LSD procedure

attach(morphine)
pairwise.t.test(Time,Group, p.adj="none")


install.packages("agricolae")
library(agricolae)
a1 <- aov(Time~Group,morphine)
LSD.test(a1,"Group", console=T)

# Critical value for the studentized range statistics (q_r)
# Remember: the Studentized range test is always one-tail test
qtukey(.95, nmeans=5, df=35)

# for p-value
1-ptukey(12.5, nmeans=5, df=35)

### Sec 12.7

# Tukey's HSD
a1 <- aov(Time~Group,morphine)
TukeyHSD(a1)


### Lab 5
exer <- read.csv("Ex12-1.csv", header=T)
head(exer)
exer$Group <- as.factor(exer$Group)

a2 <- aov(Trials~Group, exer)
LSD.test(a2, "Group", console=T)
TukeyHSD(a2)

### Sec 12.7 continuted

install.packages("mutoss")
source("http://bioconductor.org/biocLite.R")
biocLite("multtest")
library(mutoss)

# The Ryan procedure
regwq(Time~Group, morphine, alpha=0.05)

# The Dunnett Test
install.packages("DTK")
library(DTK)

DTK.result <- DTK.test(Time, Group, 0.05)
DTK.result
DTK.plot(DTK.result)

# Benjamini-Hochberg Test
pairwise.t.test(Time, Group, p.adj="BH")
##############################################################################




##########################Summarize a Linear Model############################


#linear model function
lm.model.diagnostics<-function(formula, dataset){
  
  #run model and print specific output
  model1<-lm(formula=formula, data=dataset)
  stats<-round(c(summary(model1)$fstatistic[c(1,3)], 
                 summary(model1)$sigma, 
                 summary(model1)$r.squared, 
                 summary(model1)$adj.r.squared),3)
  names(stats)<-c("F","DF", "Sigma","Rsq","AdjRsq")
  l1<-list(round(summary(model1)$coefficients,3), stats)
  names(l1)<-c("Coefficients","Stats")
  print(l1)
  
  #run specific diagnostic tests
  par(mfrow=c(1,3))
  hist(model1$residuals, main="Histogram of residuals", xlab="")
  plot(model1, 1)
  plot(model1, 2)
}

#run function for model of blood pressure on age and sex
lm.model.diagnostics(bp~age+sex, bpdata)
################## root mean squared error ##################################

rmse<-function(aovm){
  mse<-mean(aovm$residuals^2)
  rmse<-sqrt(mse)
  print(rmse)
}
rmse(anova)

##################get confidence intervals in your linear model########################################
#function to get confidence intervals for glm output, can get exponentiated output for logit or poisson
glmCI <- function(glmfit, exponent=FALSE, alpha=0.05, digits=2)
{
  #get SE from model fit
  se <- sqrt(diag(summary(glmfit)$cov.scaled))
  
  #calculuate CI for linear case
  mat <- cbind(coef(glmfit),
                 coef(glmfit) - qnorm(1-alpha/2)*se,
                 coef(glmfit) + qnorm(1-alpha/2)*se)
  colnames(mat) <- c("Beta", "LowerCI", "UpperCI")
  
  #if exponent=TRUE, exponeniate the coefficients and CIs
  if(exponent == TRUE)
  {
    mat <- exp(mat)
    if(summary(glmfit)$family$link=="logit") colnames(mat)[1] <- "OR"
    if(summary(glmfit)$family$link=="log") colnames(mat)[1] <- "IRR"
  }
  
  #return a rounded matrix of results
  return(round(mat, digits=digits))
}

#1. use glm with identity link on continuous response data (default family is gaussian)
g.glm<-glm(bp~age+sex, data=bpdata)
glmCI(g.glm)


##################Summarize Variables in a Data Set


#function to summarize the variables in the data
summarize.vars<-function(data){
  
  #use dummies package to turn all factors into dummies
  require(dummies, quietly=TRUE)
  dat.d<-dummy.data.frame(data, dummy.class="factor")
  
  #use apply to calculate statistics for each variable
  mat<-t(apply(dat.d, 2, function(x) c(length(x), 
                                      round(mean(x, na.rm=TRUE),2), 
                                      round(sd(x, na.rm=TRUE),2), 
                                      round(min(x, na.rm=TRUE),2), 
                                      round(max(x, na.rm=TRUE),2), 
                                      length(x)-length(x[!is.na(x)]))))

  #assign column names and rownames to output table
  colnames(mat)<-c("N","Mean","SD","Min","Max","Num Missing")
  rownames(mat)<-colnames(dat.d)
  return(mat)
}

summarize.vars(bpdata)


#####################################################
#                       linear contrasts            #
#####################################################
##### Week 4

setwd("C:\\Users\\Andrew\\Downloads")
getwd()

### Sec 12.1

alpha_FW <- 1-(1-.05)^2
alpha_FW

### Sec 12.3
tab12.1 <- read.csv("Tab12-1.csv", header=T)
head(tab12.1)
attach(tab12.1)
tab12.1$Group.f <- factor(tab12.1$Group)

# define contrasts
mat <- matrix(c(1/5,1/5,1/5,1/5,1/5, 
                -1/3,-1/3,-1/3,1/2,1/2, 
                0,-1,0,0,1, 
                -1,0,1,0,0, 
                0,1,-1,0,0), 
              ncol=5)
mymat <- solve(t(mat))
my.contrasts <- mymat[,2:5]
contrasts(tab12.1$Group.f) <- my.contrasts
summary(lm(Time~Group.f, tab12.1))

### Sec 12.4

# The Bonferroni method
pairwise.t.test(Time, Group, p.adj="bonf")

# The Holm-Bonferroni method
pairwise.t.test(Time, Group, p.adj="holm")

##################################################################
#CORRECTED LINEAR CONTRASTS

mat <- matrix(data = c(-1/2, -1/2, 1/3, 1/3, 1/3,
                     1, -1, 0, 0, 0,
                     0, 0, -1/2, 1, -1/2,
                     0, 0, -1, 0, 1), 
            byrow = TRUE, nrow = 4)
mat

model2 <- aov(RECALL ~ GROUP - 1)
summary(glht(model2, linfct = M))
#################################################
#clear the environment
rm(list=ls())
##################################################################